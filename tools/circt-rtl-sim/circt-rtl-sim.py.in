#!/usr/bin/env python3

# ===- circt-rtl-sim.py - CIRCT simulation driver -----------*- python -*-===//
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
# ===---------------------------------------------------------------------===//
#
# Script to drive CIRCT simulation tests.
#
# ===---------------------------------------------------------------------===//

import argparse
import os
import subprocess
import sys

ThisFileDir = os.path.dirname(__file__)
DebugBuild = "@CMAKE_BUILD_TYPE@" == "Debug"


class Questa:
  """Run and compile funcs for Questasim."""

  DefaultDriver = "driver.sv"

  def __init__(self, path, args):
    self.args = args

    # Find Questa
    if os.path.exists(path):
      self.path = os.path.dirname(path) if os.path.isfile(path) else path
    elif "@QUESTA_PATH@" != "":
      self.path = "@QUESTA_PATH@"
      if os.path.isfile(self.path):
        self.path = os.path.dirname(self.path)
    elif "QUESTA_PATH" in os.environ:
      self.path = os.environ["QUESTA_PATH"]

  def compile(self, sources):
    self.dpiLibs = filter(lambda fn: fn.endswith(".so") or fn.endswith(".dll"),
                          sources)
    sources = filter(lambda fn: not (fn.endswith(".so") or fn.endswith(".dll")),
                     sources)
    vlog = os.path.join(self.path, "vlog")
    args = [vlog, "-sv"] + list(sources)
    if self.args.gui:
      args.append('+acc')
    return subprocess.run(args)

  def run(self, cycles, simargs):
    top = self.args.top if self.args.no_default_driver else "driver"
    vsim = os.path.join(self.path, "vsim")
    # Note: vsim exit codes say nothing about the test run's pass/fail even
    # if $fatal is encountered in the simulation.
    if self.args.gui:
      cmd = [vsim, top, "-gui", "-voptargs=\"+acc\""]
    else:
      cmd = [vsim, top, "-batch", "-do", "run -all"]
    if cycles >= 0:
      cmd.append(f"+cycles={cycles}")
    for lib in self.dpiLibs:
      svLib = os.path.splitext(lib)[0]
      cmd.append("-sv_lib")
      cmd.append(svLib)
    if self.dpiLibs:
      cmd.extend(("-cpppath", "@CMAKE_CXX_COMPILER@"))
    return subprocess.run(cmd + simargs.split())


class Vivado:
  """Run and compile funcs for Vivado."""

  DefaultDriver = "driver.sv"

  def __init__(self, path, args):
    self.path = path
    self.args = args

  def compile(self, sources):
    sources = filter(lambda fn: not (fn.endswith(".so") or fn.endswith(".dll")),
                     sources)
    vlog = os.path.join(self.path, "xvlog")
    work = f"{self.libname}={self.libname}.dir"
    args = [vlog, "-sv", "-work", work] + list(sources)
    rc = subprocess.run(args)
    if rc.returncode != 0:
      return rc

    elab = os.path.join(self.path, "xelab")
    top = self.args.top if self.args.no_default_driver else "driver"
    top = f"{self.libname}.{top}"
    args = [elab, top, "-lib", work, "-debug", "typical"]
    return subprocess.run(args)

  def run(self, cycles, simargs):
    xsim = os.path.join(self.path, "xsim")

    top = self.args.top if self.args.no_default_driver else "driver"
    top = f"{self.libname}.{top}"
    args = [xsim, top]

    script = "script.tcl"
    with open(script, "w") as f:
      commands = "run -all\n"
      if not self.args.gui:
        commands += "quit\n"
      f.write(commands)
    args += ["-t", script]

    if self.args.cycles >= 0:
      args += ["-testplusarg", f"cycles={cycles}"]

    if self.args.gui:
      args.append("-gui")

    return subprocess.run(args + simargs.split())

  @property
  def libname(self):
    return self.args.sources[0].split("/")[0].split('.')[0] or "work"


class Verilator:
  """Run and compile funcs for Verilator."""

  DefaultDriver = "driver.cpp"

  def __init__(self, args):
    # Find Verilator.
    if os.path.exists(args.sim):
      self.verilator = args.sim
    elif "@VERILATOR_PATH@" != "":
      self.verilator = "@VERILATOR_PATH@"
    elif "VERILATOR_PATH" in os.environ:
      self.verilator = os.environ["VERILATOR_PATH"]

    self.top = args.top

  def compile(self, sources):
    dpiLibs = filter(lambda fn: fn.endswith(".so") or fn.endswith(".dll"),
                     sources)
    self.ldPaths = ":".join([os.path.dirname(x) for x in dpiLibs])
    debugFlags = []
    if DebugBuild:
      debugFlags = ["--trace", "--trace-params", "--trace-structs", "-DTRACE"]
    return subprocess.run([
        self.verilator, "--cc", "--top-module", self.top, "-sv", "--build",
        "--exe", "--assert"
    ] + debugFlags + sources)

  def run(self, cycles, args):
    exe = os.path.join("obj_dir", f"V{self.top}")
    cmd = [exe]
    if cycles >= 0:
      cmd.append("--cycles")
      cmd.append(str(cycles))
    cmd += args.split()
    print(f"Running: {cmd}")
    sys.stdout.flush()
    os.environ["LD_LIBRARY_PATH"] = self.ldPaths
    return subprocess.run(cmd)


def __main__(args):
  argparser = argparse.ArgumentParser(
      description="RTL simulation runner for CIRCT")

  argparser.add_argument("--sim",
                         type=str,
                         default="verilator",
                         help="Name of the RTL simulator (if in PATH) to " +
                         "use or path to an executable.")
  argparser.add_argument("--no-compile",
                         dest="no_compile",
                         action='store_true',
                         help="Don't compile the simulation.")
  argparser.add_argument("--no-run",
                         dest="no_run",
                         action='store_true',
                         help="Don't run the simulation.")
  argparser.add_argument("--gui",
                         dest="gui",
                         action='store_true',
                         help="Bring up the GUI to run.")
  argparser.add_argument("--top",
                         type=str,
                         default="top",
                         help="Name of top module to run.")
  argparser.add_argument("--objdir",
                         type=str,
                         default="",
                         help="Select a directoy in which to run this test." +
                         " Must be different from other tests in the same" +
                         " directory. Defaults to 'sources[0].o'.")
  argparser.add_argument("--no-objdir",
                         dest="no_objdir",
                         action='store_true',
                         help="Don't create and run in subdir.")
  argparser.add_argument("--simargs",
                         type=str,
                         default="",
                         help="Simulation arguments string.")
  argparser.add_argument("--no-default-driver",
                         dest="no_default_driver",
                         action='store_true',
                         help="Do not use the standard top module/drivers.")
  argparser.add_argument("--cycles",
                         type=int,
                         default=-1,
                         help="Number of cycles to run the simulator. " +
                         " -1 means don't stop.")

  argparser.add_argument("sources",
                         nargs="+",
                         help="The list of source files to be included.")

  if len(args) <= 1:
    argparser.print_help()
    return
  args = argparser.parse_args(args[1:])

  sources = [os.path.abspath(s) for s in args.sources]
  args.sources = sources

  # Create and cd into a test directory before running
  if not args.no_objdir:
    if args.objdir != "":
      objDir = args.objdir
    else:
      objDir = os.path.basename(args.sources[0])
    testDir = f"{objDir}.d"
    if not os.path.exists(testDir):
      os.mkdir(testDir)
    os.chdir(testDir)

  # Break up simulator string
  simParts = os.path.split(args.sim)
  simName = simParts[1]

  if simName in ["questa", "vsim", "vlog", "vopt"]:
    sim = Questa(simParts[0], args)
  elif simName == "xsim":
    sim = Vivado(simParts[0], args)
  elif simName == "verilator":
    sim = Verilator(args)
  else:
    print(f"Could not determine simulator from '{args.sim}'", file=sys.stderr)
    return 1

  if not args.no_default_driver:
    args.sources.append(os.path.join(ThisFileDir, sim.DefaultDriver))

  if not args.no_compile:
    rc = sim.compile(args.sources)
    if rc.returncode != 0:
      return rc
  if not args.no_run:
    rc = sim.run(args.cycles, args.simargs)
    return rc.returncode
  return 0


if __name__ == '__main__':
  sys.exit(__main__(sys.argv))
